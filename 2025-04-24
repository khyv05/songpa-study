1. 숫자 형태의 값 : 두 개 이상은 문자로 취급하지 않기 때문에 에러가 발생한다. 
- 'a'. 'b' 와 같이 문자만 작성 
- ' ' 아무 문자를 기록하지 않아도 에러가 발생하다. 
- '1' 숫자 값이지만 홀따옴표로 감싸져 있으면 문자 '1'이라고 판단한다. 

2. 문자열 형태의 값 출력 
- "안녕하세요." "123" " " "a" "abc" 모두 문자열로 인식한다. 
- " " 아무것도 없더라도 문자열로 인식한다. 

3. 논리 형태의 값 출력 
- true / false 

값 입력 명려어 : sout / soutv -> 선택 

4. 숫자와 숫자의 연산 
4-1. 정수와 정수의 연산 
- 123 + 456 = 579, 마찬가지로 사칙연산 + 나머지를 구하는 연산까지 숫자 계산됨. 

4-2. 실수와 실수의 연산 
1.23+1.23 =2.46, 실수와 실수의 연산 같은 경우는 실수로 결과 값이 나옴. 
(나머지를 구하는 것은 약간의 오차가 발생함) 

4-3. 정수와 실수의 연산 => 항상 실수가 나온다 0.0 까지 출력됨 

5. 문자와 문자의 연산 같은 경우, 'a'+'b' =ab로 출력 
+를 제외한 나머지 사칙연산은 결과값이 나오지 않음. 

6. 문자와 정수의 연산 
(소문자)'a'=97
(소문자)'b'=98 a+b=97+98=195가 출력됨. 

'a'+ 1 = 97 + 1 = 98 과 같이 값이 출력됨. 나머지 사칙연산도 마찬가지. 
'a' - 1 = 97 - 1 = 96  emddl skdha. 

7. 문자와 실수의 연산 
sout = 'a' + 1.0 = 97 + 1.0 = 98.0 으로 출력됨. (실수로 나옴) 

8. 문자열의 연산
"hello" + "world" = hello world 
"hello" + "123" = "hello123" 
(띄어쓰기를 넣을 경우 문자 칸 비워두면 같이 출력됨.) "hello" + "  " + "world" = hello world 

9. 문자열과 논리값이 연산은 값 출력이 안됨 

10. 논리값과 논리값의 연산도 출력 안됨. 

11. 논리값과 정수의 연산도 값 출력됨.  단, "every" + true = everytrue / "123" + true = 123true  

12. 두개의 문자열 합치기 (왼쪽에서 오른쪽으로 물들임.) 연산방향은 왼쪽에서 오른쪽임. 왼쪽이 문자열일 경우, 오른쪽도 문자열이 된다. 
- 9 + 9 = 18
- "9" + 9 = 99
- 9 + "9" = 99
- "9" + (9+9) = 918

13. 소괄호 사용하기 ("10과 20의 합 : " + (10+20)) = 10과 20의 합: 30 

sourcetree,  github pull / push 

14. int + ex) salary, bonus, point... 
- "1번 고객에게 포인트를" + point + "포인트 지급하였습니다"

- "보너스를 포함한 급여:" + (salary + bonus) + "원" 
int salary = 2000000 
int bonus = 20000 
=> 보너스를 포함한 급여 : 2020000원 

15. 변수의 명명 규칙! rule 
15-1. 컴파일 에러 발생 규칙
- 동일한 범위 내에서 동일한 변수를 가질 수 없다. 
 => int age = 20 
    int age = 30 (지역 겹침)

- 예약어는 불가능하다. (true, false 등)... 
=> int true = 1;
int for = 20; 

- 변수명은 대/소문자를 구분한다. (True, False) 대문자로 입력했기 때문에 위 문자와 동일하지 않음. 
int Age = 20;
int True = 30;

- 변수명은 숫자로 시작할 수 없다. 하지만 사이사이에 숫자를 섞는 것은 가능하다. ex) 1age (x) -> a1ge (o) 

- 특수기호는 '_'와 '$'만 사용 가능하다. (공백을 사용할 수 없다.) (띄어쓰기 하지 않음. 파일명에는 '_' 사용할 수 있음) 
 (문자 사이 어디에든 사용 가능.) 
sout = int _age = 10;
sout = $harp = 20; 

- 변수명의 길이는 제한이 없지만 적당히 해야 한다. (개발자들의 암묵적인 규칙) 

- 단어와 단어 사이의 연결을 언더스코어(_)로 하지 않는다. 
String user_name;  에러가 발생하진 않음. 
String userName : 연결되는 두 번째 단어를 대문자로 표현하여 구분해줌. 

- 전형적인 변수 이름이 있다면 가급적 사용하도록 한다. 또한 변수명을 한글로 되도록 짓지 않고, 어떤 의미를 가졌는지 명확하게 표현한다.
max, min, count, sum 
- 명사형으로 작성할 수 있도록 한다. ex. go home (동사 x) home (명사 o)

- boolean형은 의문문으로 가급적 긍정형태로 네이밍한다. 

true, happy, isALive 등 부정형보다는 긍정형이 더 나은 방식이다. 
